---
title: "phl-districts - 2025-03-25 - Initial data EDA"
format: 
  html:
    embed-resources: true
    toc: true
editor: source
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| code-summary: "Setup"
#| code-fold: true

## instal pacman if required
if (!require(pacman)) install.packages("pacman")
pacman::p_load(
  tidyverse, arrow, here,
  reactable,
  sf, rmapshaper, leaflet,
  bslib, shiny
) 
setwd(here("Data/notebooks/2025-03-25 - Initial data EDA"))

```

Here we just do a initial EDA on the data before we do any shiny apps. It would also be very helpful if Tamara/Amber created notebooks with the visualizations they want to turn into a Shiny app. 


# Import Data

So got an message that the final datasets are in `/clean datasets/council_measures_reduc.RData`; let's take a look!

## Data

```{r}
load(here("Data/clean datasets/council_measures_reduc.RData"))
df_data = council_measures_reduc %>% 
  janitor::clean_names()
df_data %>% glimpse()
```

Looks okay. Note that there is another data object that contains intermediate variables as well. Which can be loaded below.  For Now let's focus on the curated object.

```{{r}}
load(here("Data/clean datasets/council_measures_reduc_geom.RData"))
df_intermediate = council_measures_reduc_geom %>% 
  janitor::clean_names()
df_intermediate %>% glimpse()
```

## Boundaries

Boundaries to City Districts are found in the original Rdata files processed by Amber. Let's just extract that and do a quicks sanity check. 

```{r}
path_amber_rdata_1 = list.files(path = here("Data/clean datasets"), 
           pattern = "\\Active_licenses.Rdata$", 
           full.names = TRUE)

load(path_amber_rdata_1)

sf_districts = Active_licenses %>% 
  janitor::clean_names() %>% 
  select(district)
glimpse(sf_districts)
  
```

Let's take a quick look.

```{r}
sf_districts %>% 
  leaflet() %>%
  addTiles() %>%
  addPolygons(
    fillColor = "red", 
    weight = 1, 
    fillOpacity = 0.2,
    # Add these lines for hover functionality
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    # Create labels from your data
    label = ~paste("District:",  district),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  )
```

Let's append the data and save it for the app. 

```{r}
sf_data = sf_districts %>% left_join(df_data)
save(sf_data, file = here("Data/clean datasets/app_v0.1.RData"))
```

Now try some EDA.

--- 

# EDA

The goal of this section is to mockup of visualizations for dashboard. 

## Univariate Distribution analysis

Let's select variable to analyze.

```{r}
input = list()
input$select_variable = 'cc_district_population '

```

Let's write the visualization code

```{r}
sf_data  %>% 
    ggplot(aes_string(x = input$select_variable  )) +
    geom_density(fill = "blue", alpha = 0.5) +
    labs(title = paste("Density plot of ", input$select_variable))
```

## Bivariate Distribution analysis

Let's select variables to analyze.

```{r}
input = list()
input$select_variable_1 = 'pct_white'
input$select_variable_2 = 'median_hh_income_district'
```

Let's write the visualization code

```{r}
sf_data  %>% 
    ggplot(aes_string(x = input$select_variable_1, y = input$select_variable_2 )) +
    geom_point() +
    labs(title = paste("Scatter plot of ", input$select_variable_1, " vs ", input$select_variable_2))
```


## Spatial Distribution

Let's select variable to analyze.

```{r}
input = list()
input$select_variable = 'cc_district_population'

```

Let's write the visualization code with leaflet.

```{r}
# Create a color palette based on the variable
pal <- colorNumeric(
  palette = "viridis",
  domain = sf_data[[input$select_variable]]
)

# Create the leaflet map
sf_data %>% 
  leaflet() %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~pal(get(input$select_variable)), 
    weight = 1, 
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    # Add these lines for hover functionality
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.9,
      bringToFront = TRUE
    ),
    # Create labels from your data
    label = ~paste(
      "District:", district, "<br>",
      input$select_variable, ":", round(get(input$select_variable), 2)
    ),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>% 
  # Add a legend
  addLegend(
    position = "bottomright",
    pal = pal,
    values = ~get(input$select_variable),
    title = input$select_variable,
    opacity = 0.7)
```
